* Example visualisation

[[./.demo-combination-plot.png]]

** Setting up

We need some libraries to generate the figure, these are all pretty standard and
can be installed from CRAN. Installing libraries for spatial statistics can be
fiddly so you will need to pay attention to any messages that are printed out
during installation.

#+begin_src R :tangle demo-plot.R 
library(ggplot2)
library(ggspatial)
library(GADMTools)
library(purrr)
library(magrittr)
library(dplyr)
library(cowplot)
library(reshape2)
#+end_src

The following definitions are used for styling the visualisation and can largely
be ignored unless you want fine control over the plot.

#+begin_src R :tangle demo-plot.R
my_breaks <- seq(from = 0,
                 to = 20000,
                 by = 5000)

my_cols <- hcl.colors(n = length(my_breaks) - 1,
                      palette = "reds 3",
                      alpha = NULL,
                      rev = TRUE,
                      fixup = TRUE)

map_country_line_colour <- "#252525"
map_inline_thickness <- 0.1
map_outline_thickness <- 0.5

map_plot_background <- element_rect(colour = "#252525",
                                    fill = "#FFFFFF")
#+end_src

** Spatial data

From the GADM interface we download the geometry of Italy at an /admin1/ level
for the actual visualisation and at an /admin0/ level so we can draw the outline
of Italy seperately.

#+begin_src R :tangle demo-plot.R
italy_sf <- gadm_sf_loadCountries("ITA", level = 1)$sf
italy_outline_sf <- gadm_sf_loadCountries("ITA", level = 0)$sf
#+end_src

We then need to read in the epidemiological data from the CSV files downloaded
from the /OxCOVID19 Database/. One of the areas is coded slightly differently
between the two databases so we need to adjust that and change one of the column
names to match the names used by the GADM interface.

#+begin_src R :tangle demo-plot.R
epi_df <- read.csv("data/epidemiology.csv",
                   header = TRUE,
                   stringsAsFactors = FALSE
                   ) %>%
    filter(country == "Italy", adm_area_2 == "") %>%
    select(date, adm_area_1, adm_area_2, dead)


trento_mask <- epi_df$adm_area_1 == "Trento"
epi_df[trento_mask, ]$adm_area_1 <- "Trentino-Alto Adige"
epi_df <- rename(epi_df, NAME_1 = adm_area_1)
#+end_src

For the first map, we join the epidemiological data and the spatial data for a
single date: =01-04-2020=. Note that the dates are stored as strings when the
data is read into R so you need to make sure that these match correctly.

#+begin_src R :tangle demo-plot.R
date_index_1 <- "2020-04-01"
plot_sf_1 <- left_join(italy_sf,
                       filter(epi_df, date == date_index_1), 
                       by = "NAME_1")
#+end_src

We then generate a map of this data using the admin0 data to plot the outline of
Italy in a slightly thicker line and adjusting the background of the figure. The
result is a choropleth showing the number of deaths in each admin1 region. We
use the =theme_nothing()= here because we want a blank canvas for our map; we
will include a legend explaining the colours later.

#+begin_src R :tangle demo-plot.R
g_1 <- ggplot() +
    geom_sf(data = plot_sf_1,
            mapping = aes(fill = dead), 
            colour = map_country_line_colour, 
            size = map_inline_thickness) +
    geom_sf(data = italy_outline_sf,
            fill = NA,
            colour = map_country_line_colour, 
            size = map_outline_thickness) +
    scale_fill_gradientn(breaks = my_breaks,
                         colors = my_cols,
                         limits = range(my_breaks)) +
    theme_nothing() +
    theme(plot.background = map_plot_background)
#+end_src

Second, we repeat this process at a later date to see how the epidemic
progressed over a two month period.

#+begin_src R :tangle demo-plot.R
date_index_2 <- "2020-06-01"
plot_sf_2 <- left_join(italy_sf, 
                       filter(epi_df, date == date_index_2), 
                       by = "NAME_1")

g_2 <- ggplot() +
    geom_sf(data = plot_sf_2,
            mapping = aes(fill = dead), 
            colour = map_country_line_colour, 
            size = map_inline_thickness) +
    geom_sf(data = italy_outline_sf,
            fill = NA,
            colour = map_country_line_colour, 
            size = map_outline_thickness) +
    scale_fill_gradientn(breaks = my_breaks,
                         colors = my_cols,
                         limits = range(my_breaks)) +
    theme_nothing() +
    theme(plot.background = map_plot_background)
#+end_src

To understand the colours in the choroplethds, we get a copy of the legend for
these maps. We also create a composite figure of the two maps without the legend
so they sit neatly. Then we compose that with the legend to get the final
visualisation of the maps.

#+begin_src R :tangle demo-plot.R
italy_legend <- get_legend(g_1 +
                           labs(fill = "Cumulative\ndeaths") +
                           theme(legend.position = "left",
                                 legend.box.margin = margin(0, 0, 0, 0),
                                 legend.key.height = unit(2, units = "cm")))

g_maps_without_legend <- plot_grid(g_1 + theme(legend.position = "none", plot.margin = margin(0, 0, 0, 0, "cm")),
                                   g_2 + theme(legend.position = "none", plot.margin = margin(0, 0, 0, 0, "cm")),
                                   ncol = 1)

g_maps <- plot_grid(g_maps_without_legend,
                    italy_legend,
                    ncol = 2,
                    rel_widths = c(1,0.3))
#+end_src

** Time series data

If we aggregate over space, we can generate time series for the whole of Italy
to get a different view into the epidemic's progression.

#+begin_src R :tangle demo-plot.R
plot_epi_df <- epi_df %>%
    group_by(date) %>%
    summarise(total_dead = sum(dead)) %>%
    mutate(date = as.Date(date, format = "%Y-%m-%d"))
#+end_src

The levels of mobility and government response are intertwined with the
epidemic, so we read in these data sets as well. Note that when preparing the
mobility data we select the admin1 values here because we want the values for
the whole of Italy but they are available at a finer scale and we use the Google
data (there is also data provided by Apple). We joing all three of the data
frames so that they are easier to visualise together.

#+begin_src R :tangle demo-plot.R
plot_mobility_df <- read.csv("data/mobility.csv",
                             header = TRUE,
                             stringsAsFactors = FALSE) %>%
    filter(country == "Italy", 
           adm_area_1 == "", 
           source == "GOOGLE_MOBILITY") %>%
    select(date, workplace) %>%
    mutate(date = as.Date(date, format = "%Y-%m-%d"))
plot_mobility_df <- plot_mobility_df[order(plot_mobility_df$date),]

plot_gov_df <- read.csv("data/government_response.csv",
                        stringsAsFactors = FALSE,
                        header = TRUE) %>%
    filter(country == "Italy") %>%
    select(date, stringency_indexfordisplay) %>%
    mutate(date = as.Date(date, format = "%Y-%m-%d"))

plot_ts_df <- left_join(plot_epi_df, plot_gov_df, by = "date") %>%
    left_join(plot_mobility_df, by = "date") %>%
    melt(id.vars = "date")
#+end_src

Now we will generate a visualisation of these data; since the values are of
fundementally different units we facet the figure by the variable type. The
=labeller= is used to create clearer facet labels.

#+begin_src R :tangle demo-plot.R
facet_labels <- c(workplace = "Relative workplace mobility",
                  stringency_indexfordisplay = "Governmental response\nstringency index",
                  total_dead = "Cumulative deaths")

g_ts <- ggplot(plot_ts_df, aes(x = date, y = value)) + 
    geom_line() +
    scale_y_continuous(position = "right") +
    facet_grid(variable~., 
               scales = "free_y", 
               labeller = labeller(variable= facet_labels), 
               switch = "both") +
    labs(x = "Date", y = NULL) +
    theme_bw() +
    theme(
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        plot.margin = unit(c(0,0,0,2),"cm"),
        axis.title.x = element_text(size = 18),
        axis.text.x = element_text(size = 13),
        axis.text.y = element_text(size = 13),
        strip.text.y = element_text(size = 13)
    )
#+end_src

** Putting it all together

Finally, we need to combine these figures into one and save the result. 

#+begin_src R :tangle demo-plot.R
g_final <- plot_grid(g_ts,
                     g_maps,
                     ncol = 2,
                     rel_widths = c(0.8,1.0),
                     labels = "AUTO",
                     label_x = 0)

ggsave("demo-combination-plot.pdf",
       g_final,
       width = 2 * 14.8,
       height = 2 * 10.5,
       units = "cm")
#+end_src

If writing to PNG does not work on your system, you can save the figure as a PDF
and then convert it with the following command.

#+begin_src sh
convert -density 300 out/demo-combination-plot.pdf -quality 100 out/demo-combination-plot.png
#+end_src

** Weather time series

[[./.demo-weather-plot.png]]

The weather data is handelled slightly differently because the data set is large
enough to make it difficult to hold all of it in memory at the same time so it
is split across several files. To remedy this situation, we will =grep= out the
relevant records across each of the files and combine the weather data into a
single =italy.csv= file. 

#+begin_src sh :tangle filter-italy.sh 
# <filter-italy.sh>

head -n 1 data/weather-2020-jan.csv > italy.csv

for month in jan feb mar apr may jun;
do
    cat data/weather-2020-$month.csv | grep "Italy" >> italy.csv
done
#+end_src

The weather data is plotted by another R script so we need to include the
libraries again.

#+begin_src R :tangle demo-weather-plot.R
library(ggplot2)
library(magrittr)
library(dplyr)
library(reshape2)
#+end_src

With all of the Italian weather data in a single file, we can set up a data
frame of the temperature and the *ABSOLUTE/RELATIVE* humidity. The temperature
is initially in Kelvin, so we subtract 273.15 to get it in Celsius.

#+begin_src R :tangle demo-weather-plot.R
weather_plot_df <- read.csv("italy.csv",
                            header = TRUE,
                            stringsAsFactors = FALSE) %>%
    filter(country == "Italy", adm_area_2 == "NaN") %>%
    rename(humidity = humidity_mean_avg) %>%
    mutate(date = as.Date(date, format = "%Y-%m-%d"),
           temperature = temperature_mean_avg - 273.15) %>%
    select(date, adm_area_1, humidity, temperature) %>%
    melt(id.vars = c("date", "adm_area_1"))
#+end_src

Finally we generate the visualisation grouping the time series by administrative
area level 1 and faceting by the two variables.

#+begin_src R :tangle demo-weather-plot.R
facet_labels <- c(temperature = "Temperature (Celsius)",
                  humidity = "Humidity (XXX)")

weather_fig <- ggplot(weather_plot_df,
                      aes(x = date, y = value, group = adm_area_1)) +
    geom_line() +
    facet_wrap(~variable,
               scales = "free_y",
               labeller = labeller(variable = facet_labels)) +
    labs(x = "Date", y = NULL) +
    theme_bw()

ggsave("demo-weather-plot.pdf",
       weather_fig,
       width = 2 * 14.8,
       height = 2 * 10.5,
       units = "cm")
#+end_src
